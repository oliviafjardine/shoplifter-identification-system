version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shoplifting-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-shoplifter_db}
      POSTGRES_USER: ${POSTGRES_USER:-shoplifter_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-shoplifter_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - shoplifting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-shoplifter_user} -d ${POSTGRES_DB:-shoplifter_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: shoplifting-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - shoplifting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Main Application
  shoplifting-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: shoplifting-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-shoplifter_user}:${POSTGRES_PASSWORD:-shoplifter_pass}@postgres:5432/${POSTGRES_DB:-shoplifter_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - WORKERS=${WORKERS:-4}
      - CONTAINER=true
      - DEMO_MODE=${DEMO_MODE:-false}
    volumes:
      - ./evidence:/home/shoplifter/app/evidence
      - ./models:/home/shoplifter/app/models
      - ./logs:/home/shoplifter/app/logs
      - ./config:/home/shoplifter/app/config
      - /dev/video0:/dev/video0  # Camera access (if available)
    ports:
      - "${APP_PORT:-8080}:8080"
    networks:
      - shoplifting-network
    restart: unless-stopped
    devices:
      - /dev/video0:/dev/video0  # Camera access (optional)
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: shoplifting-nginx
    depends_on:
      - shoplifting-app
    volumes:
      - ./deployment/nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - shoplifting-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: shoplifting-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/prometheus/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    networks:
      - shoplifting-network
    restart: unless-stopped
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: shoplifting-grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - shoplifting-network
    restart: unless-stopped
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  shoplifting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
