version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shoplifting-postgres
    environment:
      POSTGRES_DB: shoplifter_db
      POSTGRES_USER: shoplifter_user
      POSTGRES_PASSWORD: shoplifter_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - shoplifting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shoplifter_user -d shoplifter_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: shoplifting-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - shoplifting-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: shoplifting-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - shoplifting-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: shoplifting-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Main Application
  shoplifting-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_STAGE: production
    container_name: shoplifting-app
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - DATABASE_URL=postgresql://shoplifter_user:shoplifter_pass@postgres:5432/shoplifter_db
      - REDIS_URL=redis://:redis_password@redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DEBUG=False
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - ENABLE_PROMETHEUS=true
      - PROMETHEUS_PORT=9090
    volumes:
      - ./evidence:/home/shoplifter/app/evidence
      - ./models:/home/shoplifter/app/models
      - ./logs:/home/shoplifter/app/logs
      - ./config:/home/shoplifter/app/config
    ports:
      - "8080:8080"
      - "9090:9090"  # Prometheus metrics
    networks:
      - shoplifting-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: shoplifting-nginx
    depends_on:
      - shoplifting-app
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    ports:
      - "80:80"
      - "443:443"
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: shoplifting-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: shoplifting-grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: shoplifting-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: shoplifting-kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: shoplifting-logstash
    depends_on:
      - elasticsearch
    volumes:
      - ./deployment/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs
    networks:
      - shoplifting-network
    restart: unless-stopped

  # MinIO for Object Storage
  minio:
    image: minio/minio:latest
    container_name: shoplifting-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: shoplifting-celery-worker
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://shoplifter_user:shoplifter_pass@postgres:5432/shoplifter_db
      - REDIS_URL=redis://:redis_password@redis:6379
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379
    command: celery -A src.shoplifting_detection.tasks worker --loglevel=info
    volumes:
      - ./evidence:/home/shoplifter/app/evidence
      - ./models:/home/shoplifter/app/models
      - ./logs:/home/shoplifter/app/logs
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: shoplifting-celery-beat
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://shoplifter_user:shoplifter_pass@postgres:5432/shoplifter_db
      - REDIS_URL=redis://:redis_password@redis:6379
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379
    command: celery -A src.shoplifting_detection.tasks beat --loglevel=info
    volumes:
      - ./logs:/home/shoplifter/app/logs
    networks:
      - shoplifting-network
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: shoplifting-flower
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379
    command: celery -A src.shoplifting_detection.tasks flower --port=5555
    ports:
      - "5555:5555"
    networks:
      - shoplifting-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  minio_data:

networks:
  shoplifting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
